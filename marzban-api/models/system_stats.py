# coding: utf-8

"""
    MarzbanAPI

    Unified GUI Censorship Resistant Solution Powered by Xray

    The version of the OpenAPI document: 0.4.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Union
from typing import Optional, Set
from typing_extensions import Self

class SystemStats(BaseModel):
    """
    SystemStats
    """ # noqa: E501
    version: StrictStr
    mem_total: StrictInt
    mem_used: StrictInt
    cpu_cores: StrictInt
    cpu_usage: Union[StrictFloat, StrictInt]
    total_user: StrictInt
    users_active: StrictInt
    incoming_bandwidth: StrictInt
    outgoing_bandwidth: StrictInt
    incoming_bandwidth_speed: StrictInt
    outgoing_bandwidth_speed: StrictInt
    __properties: ClassVar[List[str]] = ["version", "mem_total", "mem_used", "cpu_cores", "cpu_usage", "total_user", "users_active", "incoming_bandwidth", "outgoing_bandwidth", "incoming_bandwidth_speed", "outgoing_bandwidth_speed"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SystemStats from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SystemStats from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "version": obj.get("version"),
            "mem_total": obj.get("mem_total"),
            "mem_used": obj.get("mem_used"),
            "cpu_cores": obj.get("cpu_cores"),
            "cpu_usage": obj.get("cpu_usage"),
            "total_user": obj.get("total_user"),
            "users_active": obj.get("users_active"),
            "incoming_bandwidth": obj.get("incoming_bandwidth"),
            "outgoing_bandwidth": obj.get("outgoing_bandwidth"),
            "incoming_bandwidth_speed": obj.get("incoming_bandwidth_speed"),
            "outgoing_bandwidth_speed": obj.get("outgoing_bandwidth_speed")
        })
        return _obj


