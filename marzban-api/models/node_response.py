# coding: utf-8

"""
    MarzbanAPI

    Unified GUI Censorship Resistant Solution Powered by Xray

    The version of the OpenAPI document: 0.4.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from marzban-api.models.node_status import NodeStatus
from typing import Optional, Set
from typing_extensions import Self

class NodeResponse(BaseModel):
    """
    NodeResponse
    """ # noqa: E501
    name: StrictStr
    address: StrictStr
    port: Optional[StrictInt] = 62050
    api_port: Optional[StrictInt] = 62051
    usage_coefficient: Optional[Union[StrictFloat, StrictInt]] = 1.0
    id: StrictInt
    xray_version: Optional[StrictStr] = None
    status: NodeStatus
    message: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["name", "address", "port", "api_port", "usage_coefficient", "id", "xray_version", "status", "message"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NodeResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NodeResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "address": obj.get("address"),
            "port": obj.get("port") if obj.get("port") is not None else 62050,
            "api_port": obj.get("api_port") if obj.get("api_port") is not None else 62051,
            "usage_coefficient": obj.get("usage_coefficient") if obj.get("usage_coefficient") is not None else 1.0,
            "id": obj.get("id"),
            "xray_version": obj.get("xray_version"),
            "status": obj.get("status"),
            "message": obj.get("message")
        })
        return _obj


