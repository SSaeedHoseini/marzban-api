# coding: utf-8

"""
    MarzbanAPI

    Unified GUI Censorship Resistant Solution Powered by Xray

    The version of the OpenAPI document: 0.4.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from marzban-api.models.user_data_limit_reset_strategy import UserDataLimitResetStrategy
from marzban-api.models.user_status_modify import UserStatusModify
from typing import Optional, Set
from typing_extensions import Self

class UserModify(BaseModel):
    """
    UserModify
    """ # noqa: E501
    proxies: Optional[Dict[str, Dict[str, Any]]] = None
    expire: Optional[StrictInt] = None
    data_limit: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="data_limit can be 0 or greater")
    data_limit_reset_strategy: Optional[UserDataLimitResetStrategy] = None
    inbounds: Optional[Dict[str, List[StrictStr]]] = None
    note: Optional[StrictStr] = None
    sub_updated_at: Optional[datetime] = None
    sub_last_user_agent: Optional[StrictStr] = None
    online_at: Optional[datetime] = None
    on_hold_expire_duration: Optional[StrictInt] = None
    on_hold_timeout: Optional[datetime] = None
    status: Optional[UserStatusModify] = None
    __properties: ClassVar[List[str]] = ["proxies", "expire", "data_limit", "data_limit_reset_strategy", "inbounds", "note", "sub_updated_at", "sub_last_user_agent", "online_at", "on_hold_expire_duration", "on_hold_timeout", "status"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserModify from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if expire (nullable) is None
        # and model_fields_set contains the field
        if self.expire is None and "expire" in self.model_fields_set:
            _dict['expire'] = None

        # set to None if note (nullable) is None
        # and model_fields_set contains the field
        if self.note is None and "note" in self.model_fields_set:
            _dict['note'] = None

        # set to None if sub_updated_at (nullable) is None
        # and model_fields_set contains the field
        if self.sub_updated_at is None and "sub_updated_at" in self.model_fields_set:
            _dict['sub_updated_at'] = None

        # set to None if sub_last_user_agent (nullable) is None
        # and model_fields_set contains the field
        if self.sub_last_user_agent is None and "sub_last_user_agent" in self.model_fields_set:
            _dict['sub_last_user_agent'] = None

        # set to None if online_at (nullable) is None
        # and model_fields_set contains the field
        if self.online_at is None and "online_at" in self.model_fields_set:
            _dict['online_at'] = None

        # set to None if on_hold_expire_duration (nullable) is None
        # and model_fields_set contains the field
        if self.on_hold_expire_duration is None and "on_hold_expire_duration" in self.model_fields_set:
            _dict['on_hold_expire_duration'] = None

        # set to None if on_hold_timeout (nullable) is None
        # and model_fields_set contains the field
        if self.on_hold_timeout is None and "on_hold_timeout" in self.model_fields_set:
            _dict['on_hold_timeout'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserModify from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "proxies": obj.get("proxies"),
            "expire": obj.get("expire"),
            "data_limit": obj.get("data_limit"),
            "data_limit_reset_strategy": obj.get("data_limit_reset_strategy"),
            "inbounds": obj.get("inbounds"),
            "note": obj.get("note"),
            "sub_updated_at": obj.get("sub_updated_at"),
            "sub_last_user_agent": obj.get("sub_last_user_agent"),
            "online_at": obj.get("online_at"),
            "on_hold_expire_duration": obj.get("on_hold_expire_duration"),
            "on_hold_timeout": obj.get("on_hold_timeout"),
            "status": obj.get("status")
        })
        return _obj


